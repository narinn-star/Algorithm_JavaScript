/**
 * Topics: Linked List, Two Pointers, Stack, Recursion
 *
 * 1. [1,2,3,4,5] => [1,5,2,4,3]
 * Ïó¨Îü¨Í∞ÄÏßÄ ÏòàÏ†úÎ•º ÏÉùÍ∞ÅÌï¥Î≥¥Îã§Í∞Ä mid -> null Ïù¥Ïñ¥Ïïº ÌïúÎã§Îäî Í≤ÉÏùÑ Ï∞æÏùå
 * 2. midÍ∞íÏùÑ Ï∞æÍ∏∞ ÏúÑÌï¥ slow, fast Ìà¨Ìè¨Ïù∏ÌÑ∞ Î∞©Î≤ïÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú Ï∞æÍ≥† mid -> null ÎßåÎì§Í∏∞ ÏÑ±Í≥µ
 * 3. Îëê Í∞úÎ°ú Î∂ÑÎ¶¨Îêú linked listÎ•º Í∞ÄÏßÄÍ≥† ÏûàÎäî ÏÉÅÌô©ÏóêÏÑú, Îëê Î≤àÏß∏ linked list Îí§ÏßëÍ∏∞ (Ìï¥ÏÑ§ Ï∞∏Í≥†üò≠)
 * 4. Îí§ÏßëÍ≥† ÎÇòÎ©¥ [1,2,3] [5,4] Ïù¥Î†áÍ≤å Îëê Í∞úÍ∞Ä ÏÉùÍπÄ
 * 5. 1->5->2->4->3 ÏàúÏúºÎ°ú Ìï©Ï≥êÏ£ºÎ©¥ ÏôÑÏÑ± ,, ~
 */
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {void} Do not return anything, modify head in-place instead.
 */
var reorderList = function (head) {
  let slow = head;
  let fast = head;
  while (fast && fast.next) {
    slow = slow.next;
    fast = fast.next.next;
  }

  let secondHalf = slow.next;
  slow.next = null;
  let prev = null;
  while (secondHalf) {
    let tmp = secondHalf.next;
    secondHalf.next = prev;
    prev = secondHalf;
    secondHalf = tmp;
  }

  let firstHalf = head;
  while (prev) {
    let tmp1 = firstHalf.next;
    let tmp2 = prev.next;

    firstHalf.next = prev;
    prev.next = tmp1;
    firstHalf = tmp1;
    prev = tmp2;
  }
};
